import SwiftProtobufPluginLibrary

final class FileGenerator {
    private let namer: SwiftProtobufNamer
    private let fileDescriptor: FileDescriptor
    private let generatorOptions: GeneratorOptions

    var outputFilename: String {
        let ext = ".grpc.client.swift"
        let pathParts = splitPath(pathname: fileDescriptor.name)

        switch generatorOptions.outputNaming {
        case .FullPath:
            return pathParts.dir + pathParts.base + ext
        case .PathToUnderscores:
            let dirWithUnderscores = pathParts.dir.replacingOccurrences(of: "/", with: "_")
            return dirWithUnderscores + pathParts.base + ext
        case .DropPath:
            return pathParts.base + ext
        }
    }

    init(fileDescriptor: FileDescriptor, generatorOptions: GeneratorOptions) {
        self.fileDescriptor = fileDescriptor
        self.generatorOptions = generatorOptions
        self.namer = SwiftProtobufNamer(
            currentFile: fileDescriptor,
            protoFileToModuleMappings: generatorOptions.protoToModuleMappings
        )
    }
}

extension FileGenerator {
    func generateOutputFile(printer p: inout CodePrinter) {
        p.println("""
            //
            // DO NOT EDIT.
            //
            // Generated by the protocol buffer compiler.
            // Source: \(fileDescriptor.name)
            //
            """)

        let moduleNames = [
            "Foundation",
            "GRPCClient"
        ]

        for moduleName in (moduleNames + generatorOptions.extraModuleImports).sorted() {
            p.println("import \(moduleName)")
        }

        let moduleMappings = generatorOptions.protoToModuleMappings
        if let serviceProtoModuleName = moduleMappings.moduleName(forFile: fileDescriptor) {
            p.println("import \(serviceProtoModuleName)")
        }
        for importedProtoModuleName in moduleMappings.neededModules(forFile: fileDescriptor) ?? [] {
            p.println("import \(importedProtoModuleName)")
        }
        p.println()

        for service in fileDescriptor.services {
            ServiceGenerator(service: service, generatorOptions: generatorOptions, namer: namer).generateService(printer: &p)
        }
    }
}
